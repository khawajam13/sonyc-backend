---

- hosts: docker_swarm_manager
  become: True
  serial: 1

  tasks:
    - name: OPENVPN | Generate config for master VPN (only to allow for cert generation)
      docker_container:
        name: openvpn_genconfig
        image: kylemanna/openvpn
        #network_mode: none
        volumes:
          - /nfsshare:/etc/openvpn
        command: "ovpn_genconfig -u udp://{{ inventory_hostname }}:{{ vpn_port }} -s {{ default_subnet }}.0/24 -N -d -c -p 'route {{ default_subnet }}.0 255.255.255.0' -p 'register-dns' -p 'block-ipv6' -p dhcp-option DNS {{ default_subnet }}.1 -e 'topology subnet'"
        privileged: yes
        recreate: no
        restart: no
        detach: no

    - name: OPENVPN | Initialize the public key infrastructure
      docker_container:
        name: openvpn_pki
        image: kylemanna/openvpn
        volumes:
          - /nfsshare:/etc/openvpn
        env:
          EASYRSA_BATCH: "1"
          EASYRSA_REQ_CN: "PROJECT_CA"
        command: "ovpn_initpki nopass"
        recreate: no
        restart: no
        detach: no
        privileged: yes

- hosts: docker_swarm_worker
  become: True
  gather_facts: no

  tasks:

    - name: OPENVPN | Delete openvpn network, disconnecting all containers
      docker_network:
        name: docker-net-vpn
        state: absent
        force: yes
      ignore_errors: yes

#    - name: OPENVPN | Setup docker network
#      docker_network:
#        name: docker-net-vpn
#        attachable: true
#        driver: bridge
#        ipam_config:
#          - subnet: "{{ vpn_subnet }}.0/24"
#            gateway: "{{ vpn_subnet }}.1"

    - name: OPENVPN | Rename config file for each worker
      command: cp /nfsshare/openvpn.conf /nfsshare/{{ inventory_hostname }}.conf

    - name: OPENVPN | Replace default subnet mentions within new workers VPN config file
      replace:
        path: /nfsshare/{{ inventory_hostname }}.conf
        regexp: '{{ default_subnet }}'
        replace: '{{ vpn_subnet }}'

    # - name: OPENVPN | Set host routes
    #   command: sysctl -w net.ipv4.ip_forward=1 && iptables -A FORWARD -i tun+ -j ACCEPT && ip route add 192.168.255.0/24 via {{ vpn_subnet }}.1
    
    - name: OPENVPN | Prune everything (including non-dangling images)
      docker_prune:
        containers: yes
        images: yes
        images_filters:
          dangling: false
        networks: yes
        volumes: yes
        builder_cache: yes

    - name: OPENVPN | Start VPN server containers
      docker_container:
        name: vpn-server
        image: kylemanna/openvpn
       # networks:
        #  - name: docker-net-vpn
            #ipv4_address: "{{ vpn_subnet }}.1"
        command: "ovpn_run --config /etc/openvpn/{{ inventory_hostname }}.conf"
        volumes:
          - /nfsshare:/etc/openvpn
        ports:
          - "{{ vpn_port }}:1194/udp"
        capabilities:
          - NET_ADMIN
        privileged: yes
        recreate: yes
        restart: yes
        detach: yes

- hosts: docker_swarm_manager
  become: True
  serial: 1

  tasks:

    - name: OPENVPN | Install openvpn on master
      apt: name=openvpn state=present

    - name: OPENVPN | Create client certificate
      docker_container:
        name: openvpn_gencert
        image: kylemanna/openvpn
        volumes:
          - /nfsshare:/etc/openvpn
        command: "easyrsa build-client-full {{ inventory_hostname }}_client nopass"
        privileged: yes
        recreate: no
        restart: no
        detach: no

    - name: OPENVPN | Create certificate directory if it does not exist
      file:
        path: /nfsshare/client_configs
        state: directory
        mode: '0755'

    - name: OPENVPN | Save generated certificate to keys folder
      shell: docker run -v /nfsshare:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient {{ inventory_hostname }}_client > /nfsshare/client_configs/{{ inventory_hostname }}_client.ovpn

    - name: OPENVPN | Remove master remote line from config file
      shell: sed --in-place '/{{ inventory_hostname }}/d' /nfsshare/client_configs/{{ inventory_hostname }}_client.ovpn

    - name: OPENVPN | Add server remote config to cert file and create one for each worker in master /etc/openvpn
      shell: echo "remote {{ item }} {{ vpn_port }} udp" >> /nfsshare/client_configs/{{ inventory_hostname }}_client.ovpn && cp /nfsshare/client_configs/{{ inventory_hostname }}_client.ovpn /etc/openvpn/{{ item }}.conf && sed --in-place '/{{ item }}/d' /nfsshare/client_configs/{{ inventory_hostname }}_client.ovpn
      with_items: "{{ groups['docker_swarm_worker'] }}"

    - name: OPENVPN | Kill existing openvpn instances
      command: killall openvpn
      ignore_errors: yes

    - name: OPENVPN | Start openvpn client and connect to both VPNs
      command: openvpn --config /nfsshare/client_configs/{{ inventory_hostname }}_client.ovpn --remote "{{ item }}" "{{ vpn_port }}" --daemon
      with_items: "{{ groups['docker_swarm_worker'] }}"

    # - name: OPENVPN | Start openvpn client and connect to both VPNs
    #   service:
    #     name: openvpn
    #     state: restarted

    # - name: Start openvpn systemd service
    #   become: true
    #   systemd:
    #     name: openvpn@server
    #     state: started
    #     daemon_reload: yes
    #     enabled: yes